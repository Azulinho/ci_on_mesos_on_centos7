---

- name: gather list of installed nix packages
  shell: |
    . {{ nix_home }}/.nix-profile/etc/profile.d/nix.sh
    nix-env -q > {{ nix_home }}/nix-env.q
  become: yes
  become_user: '{{ nix_user }}'
  tags:
    - marathon
    - apache-maven
    - openjdk

- name: installing marathon through nix
  shell: |
    if ! grep -q "{{ item }}" {{ nix_home}}/nix-env.q; then
      . {{ nix_home }}/.nix-profile/etc/profile.d/nix.sh
      nix-env -f ~/.nix-defexpr/channels/nixos-16.03/nixpkgs/ -i {{ item }}
      echo "marathon.changed"
    fi
  args:
    executable: '{{ nix_shell }}'
  become: yes
  become_user: '{{ nix_user }}'
  register: marathon
  changed_when: "'marathon.changed' in marathon.stdout"
  with_items:
    - apache-maven
    - openjdk
    - marathon
  notify:
    - reload systemd
    - restart-marathon
  tags:
    - marathon
    - apache-maven
    - openjdk

- name: deploying marathon files
  template:
    src={{ item.src }}
    dest={{ item.dest }}
    owner='root'
  with_items:
    - { src: 'etc.systemd.system.marathon.service',
        dest: '/etc/systemd/system/marathon.service' }
  notify:
    - reload systemd
    - restart-marathon
  when: ansible_os_family == 'Suse'
  tags:
    - marathon
    - systemd

- name: create required directories
  file:
    path={{ item.path }}
    owner={{ item.owner }}
    group={{ item.group }}
    state=directory
    recurse=yes
  with_items:
    - { path: '{{ marathon_datadir }}', owner: '{{ nix_user }}', group: '{{ nix_group }}' }
    - { path: '{{ marathon_logdir }}', owner: '{{ nix_user }}', group: '{{ nix_group }}' }
    - { path: '{{ marathon_bindir }}', owner: '{{ nix_user }}', group: '{{ nix_group }}' }
    - { path: '{{ marathon_confdir }}', owner: '{{ nix_user }}', group: '{{ nix_group }}' }
  tags:
    - marathon

- name: create mesos-master authentication file
  copy:
    content='{{ marathon_mesos_master_principal_password }}'
    dest='{{ marathon_mesos_authentication_secret_file }}'
    owner='{{ nix_user }}'
    group='{{ nix_group }}'
    mode=0600
  notify:
    - reload systemd
    - restart-marathon
  tags:
    - marathon
    - systemd

- name: start services
  service:
    name={{ item }}
    state=started
    enabled=yes
  with_items:
    - marathon
  when: ansible_os_family == 'Suse'
  tags:
    - marathon
    - systemd
