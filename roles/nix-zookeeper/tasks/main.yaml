---

- name: gather list of installed nix packages
  shell: |
    . {{ nix_home }}/.nix-profile/etc/profile.d/nix.sh
    nix-env -q > {{ nix_home }}/nix-env.q
  become: yes
  become_user: '{{ nix_user }}'
  with_items:
    - apache-maven
    - openjdk
    - zookeeper

- name: installing zookeeper through nix
  shell: |
    if ! grep -q "{{ item }}" {{ nix_home}}/nix-env.q; then
      . {{ nix_home }}/.nix-profile/etc/profile.d/nix.sh
      nix-env -f ~/.nix-defexpr/channels/nixos-16.03/nixpkgs/ -i {{ item }}
      echo "zookeeper.changed"
    fi
  args:
    executable: '{{ nix_shell }}'
  become: yes
  become_user: '{{ nix_user }}'
  register: zookeeper
  changed_when: "'zookeeper.changed' in zookeeper.stdout"
  with_items:
    - apache-maven
    - openjdk
    - zookeeper
  notify:
    - reload systemd
    - restart-zookeeper
  tags:
    - zookeeper
    - apache-maven
    - openjdk


- name: create required directories
  file:
    path={{ item.path }}
    owner={{ item.owner }}
    state=directory
    recurse=yes
  with_items:
    - { path: '{{ zookeeper_datadir }}', owner: '{{ nix_user }}' }
    - { path: '{{ zookeeper_logdir }}', owner: '{{ nix_user }}' }
    - { path: '{{ zookeeper_bindir }}', owner: '{{ nix_user }}' }
    - { path: '{{ zookeeper_confdir }}', owner: '{{ nix_user }}' }
  tags:
    - zookeeper


- name: deploying zookeeper files
  template:
    src='{{ item.src }}'
    dest='{{ item.dest }}'
    owner='{{ item.owner }}'
    mode='{{ item.mode | default('644') }}'
  with_items:
    - { src: 'home.nix.zookeeper.conf.zoo.cfg',
        dest: '{{ zookeeper_zoo_cfg }}',
        owner: '{{ nix_user }}' }

    - { src: 'home.nix.zookeeper.bin.start.sh',
        dest: '{{ zookeeper_bin_start }}',
        owner: '{{ nix_user }}',
        mode: '0755' }

    - { src: 'home.nix.zookeeper.data.myid',
        dest: '{{ zookeeper_myid_file }}',
        owner: '{{ nix_user }}' }

    - { src: 'etc.systemd.system.zookeeper.service',
        dest: '/etc/systemd/system/zookeeper.service',
        owner: 'root' }
  notify:
    - reload systemd
    - restart-zookeeper
  when: ansible_os_family == 'Suse'
  tags:
    - zookeeper
    - systemd


- name: start services
  service:
    name={{ item }}
    state=started
    enabled=yes
  with_items:
    - zookeeper
  tags:
    - zookeeper
    - systemd



